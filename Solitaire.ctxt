#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ Solitaire\ class\ constructor\ \n\ \n
comment10.params=
comment10.target=void\ stockClicked()
comment10.text=\n\ Called\ when\ stock\ is\ clicked\ \n
comment11.params=
comment11.target=void\ wasteClicked()
comment11.text=\n\ Called\ when\ waste\ is\ clicked\ \n
comment12.params=index
comment12.target=void\ foundationClicked(int)
comment12.text=\n\ Called\ when\ given\ foundation\ is\ clicked\n\ @precondition\ 0\ <\=\ index\ <\ 4\n
comment13.params=index
comment13.target=void\ pileClicked(int)
comment13.text=\n\ Called\ when\ given\ pile\ is\ clicked\n\ @precondition\ 0\ <\=\ index\ <\ 7\n
comment14.params=card\ index
comment14.target=boolean\ canAddToPile(Card,\ int)
comment14.text=\n\ Tests\ if\ a\ card\ can\ be\ legally\ moved\ to\ the\ top\ of\ the\ given\ pile\n\ @precondition\ 0\ <\=\ index\ <\ 7\n\ @return\ true\ if\ legal,\ false\ otherwise\ \n
comment15.params=index
comment15.target=java.util.Stack\ removeFaceUpCards(int)
comment15.text=\n\ Removes\ cards\ that\ are\ face\ up\ from\ the\ given\ pile\ \n\ and\ adds\ it\ to\ a\ new\ stack\n\ @precondition\ 0\ <\=\ index\ <\ 7\n\ @postcondition\ removes\ all\ face\ up\ cards\ on\ the\ top\n\ of\ the\ given\ pile\n\ @return\ a\ stack\ containing\ these\ cards\n
comment16.params=cards\ index
comment16.target=void\ addToPile(java.util.Stack,\ int)
comment16.text=\n\ @precondition\ 0\ <\=\ index\ <\ 7\n\ @postcondition\ removes\ elements\ from\ cards\ and\ \n\ adds\ them\ to\ the\ given\ pile\ \n
comment17.params=card\ index
comment17.target=boolean\ canAddToFoundation(Card,\ int)
comment17.text=\n\ Tests\ if\ a\ card\ can\ be\ legally\ moved\ to\ the\ top\ of\ the\ foundation\n\ @precondition\ 0\ <\=\ index\ <\ 4\n\ @return\ true\ if\ legal,\ false\ otherwise\ \n
comment2.params=
comment2.target=Card\ getStockCard()
comment2.text=\n\ Gets\ the\ card\ on\ top\ of\ the\ stock\ \n\ @return\ the\ card\ on\ the\ top\ of\ the\ stock;\ null\ if\ \n\ \ \ \ \ \ \ \ \ stock\ is\ empty\ \n
comment3.params=
comment3.target=Card\ getWasteCard()
comment3.text=\n\ Gets\ the\ card\ on\ top\ of\ the\ waste\ \n\ @return\ the\ card\ on\ the\ top\ of\ the\ waste;\ null\ if\ \n\ \ \ \ \ \ \ \ \ waste\ is\ empty\ \n
comment4.params=index
comment4.target=Card\ getFoundationCard(int)
comment4.text=\n\ Gets\ the\ card\ on\ top\ of\ the\ given\ foundation\n\ @precondition\ 0\ <\=\ index\ <\ 4\n\ @return\ the\ card\ on\ top\ of\ the\ given\ foundation;\ null\ if\ \n\ \ \ \ \ \ \ \ \ foundation\ is\ empty\ \n
comment5.params=index
comment5.target=java.util.Stack\ getPile(int)
comment5.text=\n\ Gets\ the\ pile\ at\ the\ given\ index\ \n\ @postcondition\ 0\ <\=\ index\ <\ 7\n\ @return\ a\ reference\ to\ the\ given\ pile\ \n
comment6.params=
comment6.target=void\ createStock()
comment6.text=\n\ Creates\ an\ arraylist\ of\ 52\ cards\ and\ randomly\ removes\n\ cards\ from\ it\ and\ adds\ it\ to\ the\ stock\ until\ no\ cards\ are\ left\ \n\ to\ remove\ \n
comment7.params=
comment7.target=void\ deal()
comment7.text=\n\ Deals\ cards\ from\ the\ stock\ to\ the\ 7\ piles\ \n
comment8.params=
comment8.target=void\ dealThreeCards()
comment8.text=\n\ Moves\ the\ top\ three\ cards\ from\ the\ stock\ onto\ \n\ the\ top\ of\ the\ waste\ \n
comment9.params=
comment9.target=void\ resetStock()
comment9.text=\n\ Repeatedly\ moves\ the\ top\ card\ from\ the\ waste\ \n\ to\ the\ top\ of\ the\ stock\ \n
numComments=18
